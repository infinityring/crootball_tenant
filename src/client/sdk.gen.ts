// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { CompetitionsCreateData, CompetitionsCreateResponses, ContractsCreateData, ContractsCreateResponses, ContractsCloseData, ContractsCloseResponses, ContractsCloseErrors, ContractsRenewData, ContractsRenewResponses, ContractsRenewErrors, ContractsGetByIdData, ContractsGetByIdResponses, ContractsGetByIdErrors, FacilitiesDeleteData, FacilitiesDeleteResponses, FacilitiesDeleteErrors, FacilitiesGetByIdData, FacilitiesGetByIdResponses, FacilitiesGetByIdErrors, FacilitiesUpdateData, FacilitiesUpdateResponses, FacilitiesUpdateErrors, FacilitiesGetBySlugData, FacilitiesGetBySlugResponses, FacilitiesGetBySlugErrors, FacilitiesAllData, FacilitiesAllResponses, FacilitiesCreateData, FacilitiesCreateResponses, FacilitiesFindData, FacilitiesFindResponses, GetApiHealthData, GetApiHealthResponses, NotificationsDeleteData, NotificationsDeleteResponses, NotificationsDeleteErrors, NotificationsGetByIdData, NotificationsGetByIdResponses, NotificationsGetByIdErrors, NotificationsUpdateData, NotificationsUpdateResponses, NotificationsUpdateErrors, NotificationsCreateData, NotificationsCreateResponses, NotificationsCreateErrors, NotificationsFindData, NotificationsFindResponses, NotificationsFindErrors, OffersGetByIdData, OffersGetByIdResponses, OffersGetByIdErrors, OffersCreateData, OffersCreateResponses, OffersCreateErrors, OffersProcessData, OffersProcessResponses, OffersProcessErrors, OffersFindData, OffersFindResponses, PlayersDeleteData, PlayersDeleteResponses, PlayersDeleteErrors, PlayersGetByIdData, PlayersGetByIdResponses, PlayersGetByIdErrors, PlayersUpdateData, PlayersUpdateResponses, PlayersUpdateErrors, PlayersGetBySlugData, PlayersGetBySlugResponses, PlayersGetBySlugErrors, PlayersSearchData, PlayersSearchResponses, PlayersSearchErrors, PlayersCreateData, PlayersCreateResponses, PlayersSnapshotData, PlayersSnapshotResponses, PlayersSnapshotErrors, PlayersUpdateStatisticsData, PlayersUpdateStatisticsResponses, PlayersUpdateStatisticsErrors, PlayersGetContractsData, PlayersGetContractsResponses, PlayersGetContractsErrors, PlayersFindData, PlayersFindResponses, PlayersGetPlayerByTmIdData, PlayersGetPlayerByTmIdResponses, PlayersGetPlayerByTmIdErrors, SeasonsDeleteData, SeasonsDeleteResponses, SeasonsDeleteErrors, SeasonsGetByIdData, SeasonsGetByIdResponses, SeasonsGetByIdErrors, SeasonsUpdateData, SeasonsUpdateResponses, SeasonsUpdateErrors, SeasonsGetPhasesData, SeasonsGetPhasesResponses, SeasonsGetPhasesErrors, SeasonsAllData, SeasonsAllResponses, SeasonsCreateData, SeasonsCreateResponses, SeasonsPhasesCreateData, SeasonsPhasesCreateResponses, SeasonsPhasesDeleteData, SeasonsPhasesDeleteResponses, SeasonsPhasesDeleteErrors, SeasonsPhasesGetByIdData, SeasonsPhasesGetByIdResponses, SeasonsPhasesGetByIdErrors, SeasonsPhasesUpdateData, SeasonsPhasesUpdateResponses, SeasonsPhasesUpdateErrors, SeasonsFindData, SeasonsFindResponses, StaffDeleteData, StaffDeleteResponses, StaffDeleteErrors, StaffGetByIdData, StaffGetByIdResponses, StaffGetByIdErrors, StaffUpdateData, StaffUpdateResponses, StaffUpdateErrors, StaffGetBySlugData, StaffGetBySlugResponses, StaffGetBySlugErrors, StaffAllData, StaffAllResponses, StaffCreateData, StaffCreateResponses, StaffFindData, StaffFindResponses, GetApiStatusData, GetApiStatusResponses, TeamsCreateData, TeamsCreateResponses, TeamsCreateErrors, TeamsDeleteData, TeamsDeleteResponses, TeamsDeleteErrors, TeamsGetByIdData, TeamsGetByIdResponses, TeamsGetByIdErrors, TeamsUpdateData, TeamsUpdateResponses, TeamsUpdateErrors, TeamsSnapshotData, TeamsSnapshotResponses, TeamsSnapshotErrors, TeamsRosterData, TeamsRosterResponses, TeamsRosterErrors, TeamsUpdateStatisticsData, TeamsUpdateStatisticsResponses, TeamsUpdateStatisticsErrors, TeamsStatsData, TeamsStatsResponses, TeamsStatsErrors, TeamsGetBySlugData, TeamsGetBySlugResponses, TeamsGetBySlugErrors, TeamsFindData, TeamsFindResponses, TeamsFindErrors, TeamsGetManagerData, TeamsGetManagerResponses, TeamsGetManagerErrors, TenantSetupData, TenantSetupResponses, TenantsGetBySlugData, TenantsGetBySlugResponses, TenantsGetBySlugErrors, TenantsDeleteData, TenantsDeleteResponses, TenantsDeleteErrors, TenantsGetByIdData, TenantsGetByIdResponses, TenantsGetByIdErrors, TenantsUpdateData, TenantsUpdateResponses, TenantsUpdateErrors, TenantsAllData, TenantsAllResponses, TenantsAllErrors, TenantsCreateData, TenantsCreateResponses, TenantsCreateErrors, TenantsFindData, TenantsFindResponses, TenantsFindErrors, TenantsAcceptJoinRequestData, TenantsAcceptJoinRequestResponses, TenantsRefuseJoinRequestData, TenantsRefuseJoinRequestResponses, TenantsRefuseJoinRequestErrors, TenantsListJoinRequestsData, TenantsListJoinRequestsResponses, TenantsListJoinRequestsErrors, TenantsFreeTeamsData, TenantsFreeTeamsResponses, TenantsFreeTeamsErrors, TenantsCurrentSeasonData, TenantsCurrentSeasonResponses, TenantsCurrentSeasonErrors, TenantsGetConfigurationData, TenantsGetConfigurationResponses, TenantsGetConfigurationErrors, TenantsUpdateConfigurationData, TenantsUpdateConfigurationResponses, TenantsUpdateConfigurationErrors, TenantsAssignedTeamsData, TenantsAssignedTeamsResponses, TenantsAssignedTeamsErrors, TenantsGetByTokenData, TenantsGetByTokenResponses, TenantsGetByTokenErrors, TenantsGetTokensData, TenantsGetTokensResponses, TenantsGetTokensErrors, DeleteApiTokensData, DeleteApiTokensResponses, DeleteApiTokensErrors, TokensCreateData, TokensCreateResponses, TokensCreateErrors, ToolsImportPlayersDataData, ToolsImportPlayersDataResponses, ToolsImportPlayersDataErrors, ToolsUpdatePlayersStatisticsData, ToolsUpdatePlayersStatisticsResponses, ToolsUpdatePlayersStatisticsErrors, ToolsExportPlayersDataData, ToolsExportPlayersDataResponses, ToolsExportPlayersDataErrors, ToolsImportPlayersListData, ToolsImportPlayersListResponses, ToolsImportPlayersListErrors, ToolsImportPlayersPesDataData, ToolsImportPlayersPesDataResponses, ToolsImportPlayersPesDataErrors, ToolsTmDataGetPlayerData, ToolsTmDataGetPlayerResponses, ToolsTmDataGetPlayerErrors, ToolsTmDataGetTeamData, ToolsTmDataGetTeamResponses, ToolsTmDataGetTeamErrors, ToolsTmDataSearchData, ToolsTmDataSearchResponses, ToolsTmDataSearchErrors, TransactionsInsertData, TransactionsInsertResponses, TransactionsInsertErrors, TransactionsFindData, TransactionsFindResponses, TransactionsFindErrors, TransactionsGetByIdData, TransactionsGetByIdResponses, TransactionsGetByIdErrors, UsersDeleteData, UsersDeleteResponses, UsersDeleteErrors, UsersGetByIdData, UsersGetByIdResponses, UsersGetByIdErrors, UsersUpdateData, UsersUpdateResponses, UsersUpdateErrors, UsersGetByIdentityData, UsersGetByIdentityResponses, UsersGetByIdentityErrors, UsersGetBySlugData, UsersGetBySlugResponses, UsersGetBySlugErrors, UsersAllData, UsersAllResponses, UsersCreateData, UsersCreateResponses, UsersFindData, UsersFindResponses, UsersCreateTenantData, UsersCreateTenantResponses, UsersCreateTenantErrors, UsersJoinRequestsData, UsersJoinRequestsResponses, UsersJoinTenantData, UsersJoinTenantResponses, UsersJoinTenantErrors, UsersGetTeamsData, UsersGetTeamsResponses, UsersGetTeamsErrors, UsersGetTenantsData, UsersGetTenantsResponses, UsersGetTenantsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create a new competition
 * Creates a new competition with the provided data
 */
export const competitionsCreate = <ThrowOnError extends boolean = false>(options?: Options<CompetitionsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompetitionsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/competitions/create',
        ...options
    });
};

/**
 * Create a new contract
 * Creates a new contract with the provided data
 */
export const contractsCreate = <ThrowOnError extends boolean = false>(options?: Options<ContractsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ContractsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/contracts/',
        ...options
    });
};

/**
 * Close a contract
 * Closes an existing contract
 */
export const contractsClose = <ThrowOnError extends boolean = false>(options: Options<ContractsCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ContractsCloseResponses, ContractsCloseErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/contracts/{id}/close',
        ...options
    });
};

/**
 * Renew a contract
 * Renews an existing contract with new terms
 */
export const contractsRenew = <ThrowOnError extends boolean = false>(options: Options<ContractsRenewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ContractsRenewResponses, ContractsRenewErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/contracts/{id}/renew',
        ...options
    });
};

/**
 * Get contract by ID
 * Retrieves a contract by its unique identifier
 */
export const contractsGetById = <ThrowOnError extends boolean = false>(options: Options<ContractsGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ContractsGetByIdResponses, ContractsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/contracts/{id}',
        ...options
    });
};

/**
 * Delete facility by ID
 * Deletes a facility by its unique identifier
 */
export const facilitiesDelete = <ThrowOnError extends boolean = false>(options: Options<FacilitiesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<FacilitiesDeleteResponses, FacilitiesDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/{id}',
        ...options
    });
};

/**
 * Get facility by ID
 * Retrieves a facility by its unique identifier
 */
export const facilitiesGetById = <ThrowOnError extends boolean = false>(options: Options<FacilitiesGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FacilitiesGetByIdResponses, FacilitiesGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/{id}',
        ...options
    });
};

/**
 * Update facility by ID
 * Updates a facility with the provided data
 */
export const facilitiesUpdate = <ThrowOnError extends boolean = false>(options: Options<FacilitiesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<FacilitiesUpdateResponses, FacilitiesUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/{id}',
        ...options
    });
};

/**
 * Get facility by slug
 * Retrieves a facility by its slug
 */
export const facilitiesGetBySlug = <ThrowOnError extends boolean = false>(options: Options<FacilitiesGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FacilitiesGetBySlugResponses, FacilitiesGetBySlugErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/slug/{slug}',
        ...options
    });
};

/**
 * Get all facilities
 * Retrieves all facilities
 */
export const facilitiesAll = <ThrowOnError extends boolean = false>(options?: Options<FacilitiesAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FacilitiesAllResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/',
        ...options
    });
};

/**
 * Create a new facility
 * Creates a new facility with the provided data
 */
export const facilitiesCreate = <ThrowOnError extends boolean = false>(options?: Options<FacilitiesCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FacilitiesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/',
        ...options
    });
};

/**
 * Find facilities by criteria
 * Searches for facilities based on provided criteria
 */
export const facilitiesFind = <ThrowOnError extends boolean = false>(options?: Options<FacilitiesFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FacilitiesFindResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/facilities/find',
        ...options
    });
};

/**
 * API health check
 * Verifies the API is running correctly
 */
export const getApiHealth = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiHealthResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/health/',
        ...options
    });
};

/**
 * Delete notification by ID
 * Deletes a notification by its unique identifier
 */
export const notificationsDelete = <ThrowOnError extends boolean = false>(options: Options<NotificationsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NotificationsDeleteResponses, NotificationsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/notifications/{id}',
        ...options
    });
};

/**
 * Get notification by ID
 * Retrieves a notification by its unique identifier
 */
export const notificationsGetById = <ThrowOnError extends boolean = false>(options: Options<NotificationsGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotificationsGetByIdResponses, NotificationsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/notifications/{id}',
        ...options
    });
};

/**
 * Update notification by ID
 * Updates a notification with the provided data
 */
export const notificationsUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotificationsUpdateResponses, NotificationsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/notifications/{id}',
        ...options
    });
};

/**
 * Create a new tenant
 * Creates a new tenant with the provided data
 */
export const notificationsCreate = <ThrowOnError extends boolean = false>(options?: Options<NotificationsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NotificationsCreateResponses, NotificationsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/notifications/',
        ...options
    });
};

/**
 * Find notifications by criteria
 * Searches for notifications based on provided criteria
 */
export const notificationsFind = <ThrowOnError extends boolean = false>(options?: Options<NotificationsFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NotificationsFindResponses, NotificationsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/notifications/find',
        ...options
    });
};

/**
 * Get offer by ID
 * Retrieves a offer by its unique identifier
 */
export const offersGetById = <ThrowOnError extends boolean = false>(options: Options<OffersGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OffersGetByIdResponses, OffersGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/offers/{id}',
        ...options
    });
};

/**
 * Create offer
 * Creates a new offer
 */
export const offersCreate = <ThrowOnError extends boolean = false>(options?: Options<OffersCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OffersCreateResponses, OffersCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/offers/',
        ...options
    });
};

/**
 * Process offer
 * Processes a offer
 */
export const offersProcess = <ThrowOnError extends boolean = false>(options: Options<OffersProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OffersProcessResponses, OffersProcessErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/offers/{id}/process',
        ...options
    });
};

/**
 * Find offers by criteria
 * Searches for offers based on provided criteria
 */
export const offersFind = <ThrowOnError extends boolean = false>(options?: Options<OffersFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OffersFindResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/offers/find',
        ...options
    });
};

/**
 * Delete player by ID
 * Deletes a player by their unique identifier
 */
export const playersDelete = <ThrowOnError extends boolean = false>(options: Options<PlayersDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PlayersDeleteResponses, PlayersDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/{id}',
        ...options
    });
};

/**
 * Get player by ID
 * Retrieves a player by their unique identifier
 */
export const playersGetById = <ThrowOnError extends boolean = false>(options: Options<PlayersGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlayersGetByIdResponses, PlayersGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/{id}',
        ...options
    });
};

/**
 * Update player by ID
 * Updates a player with the provided data
 */
export const playersUpdate = <ThrowOnError extends boolean = false>(options: Options<PlayersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PlayersUpdateResponses, PlayersUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/{id}',
        ...options
    });
};

/**
 * Get player by slug
 * Retrieves a player by their slug
 */
export const playersGetBySlug = <ThrowOnError extends boolean = false>(options: Options<PlayersGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlayersGetBySlugResponses, PlayersGetBySlugErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/slug/{slug}',
        ...options
    });
};

/**
 * Search players
 * Searches for players based on provided criteria
 */
export const playersSearch = <ThrowOnError extends boolean = false>(options?: Options<PlayersSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PlayersSearchResponses, PlayersSearchErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/search',
        ...options
    });
};

/**
 * Create a new player
 * Creates a new player with the provided data
 */
export const playersCreate = <ThrowOnError extends boolean = false>(options?: Options<PlayersCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PlayersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/',
        ...options
    });
};

/**
 * Get player snapshot by ID
 * Retrieves a player snapshot for a specific date
 */
export const playersSnapshot = <ThrowOnError extends boolean = false>(options: Options<PlayersSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlayersSnapshotResponses, PlayersSnapshotErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/{id}/snapshot',
        ...options
    });
};

/**
 * Update player statistics
 * Updates player statistics
 */
export const playersUpdateStatistics = <ThrowOnError extends boolean = false>(options: Options<PlayersUpdateStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlayersUpdateStatisticsResponses, PlayersUpdateStatisticsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/{id}/updateStatistics',
        ...options
    });
};

/**
 * Get player contracts by ID
 * Retrieves a player contracts by their unique identifier
 */
export const playersGetContracts = <ThrowOnError extends boolean = false>(options: Options<PlayersGetContractsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlayersGetContractsResponses, PlayersGetContractsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/{id}/contracts',
        ...options
    });
};

/**
 * Find players by criteria
 * Searches for players based on provided criteria
 */
export const playersFind = <ThrowOnError extends boolean = false>(options?: Options<PlayersFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PlayersFindResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/find',
        ...options
    });
};

/**
 * Get player by TransferMarkt ID
 * Searches for players based on TransferMarkt ID
 */
export const playersGetPlayerByTmId = <ThrowOnError extends boolean = false>(options: Options<PlayersGetPlayerByTmIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PlayersGetPlayerByTmIdResponses, PlayersGetPlayerByTmIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/players/tm/{tmid}',
        ...options
    });
};

/**
 * Delete season by ID
 * Deletes a season by its unique identifier
 */
export const seasonsDelete = <ThrowOnError extends boolean = false>(options: Options<SeasonsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SeasonsDeleteResponses, SeasonsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/{id}',
        ...options
    });
};

/**
 * Get season by ID
 * Retrieves a season by its unique identifier
 */
export const seasonsGetById = <ThrowOnError extends boolean = false>(options: Options<SeasonsGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SeasonsGetByIdResponses, SeasonsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/{id}',
        ...options
    });
};

/**
 * Update season by ID
 * Updates a season with the provided data
 */
export const seasonsUpdate = <ThrowOnError extends boolean = false>(options: Options<SeasonsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SeasonsUpdateResponses, SeasonsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/{id}',
        ...options
    });
};

/**
 * Get season phases
 * Retrieves all calendar phases for a season
 */
export const seasonsGetPhases = <ThrowOnError extends boolean = false>(options: Options<SeasonsGetPhasesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SeasonsGetPhasesResponses, SeasonsGetPhasesErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/{id}/phases',
        ...options
    });
};

/**
 * Get all seasons
 * Retrieves all seasons
 */
export const seasonsAll = <ThrowOnError extends boolean = false>(options?: Options<SeasonsAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SeasonsAllResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/',
        ...options
    });
};

/**
 * Create a new season
 * Creates a new season with the provided data
 */
export const seasonsCreate = <ThrowOnError extends boolean = false>(options?: Options<SeasonsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SeasonsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/',
        ...options
    });
};

/**
 * Add calendar phase
 * Adds a new calendar phase to a season
 */
export const seasonsPhasesCreate = <ThrowOnError extends boolean = false>(options?: Options<SeasonsPhasesCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SeasonsPhasesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/phases',
        ...options
    });
};

/**
 * Delete calendar phase by ID
 * Deletes a calendar phase by its unique identifier
 */
export const seasonsPhasesDelete = <ThrowOnError extends boolean = false>(options: Options<SeasonsPhasesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SeasonsPhasesDeleteResponses, SeasonsPhasesDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/phases/{id}',
        ...options
    });
};

/**
 * Get calendar phase by ID
 * Retrieves a calendar phase by its unique identifier
 */
export const seasonsPhasesGetById = <ThrowOnError extends boolean = false>(options: Options<SeasonsPhasesGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SeasonsPhasesGetByIdResponses, SeasonsPhasesGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/phases/{id}',
        ...options
    });
};

/**
 * Update calendar phase by ID
 * Updates a calendar phase with the provided data
 */
export const seasonsPhasesUpdate = <ThrowOnError extends boolean = false>(options: Options<SeasonsPhasesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SeasonsPhasesUpdateResponses, SeasonsPhasesUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/phases/{id}',
        ...options
    });
};

/**
 * Find seasons by criteria
 * Searches for seasons based on provided criteria
 */
export const seasonsFind = <ThrowOnError extends boolean = false>(options?: Options<SeasonsFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SeasonsFindResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/seasons/find',
        ...options
    });
};

/**
 * Delete staff member by ID
 * Deletes a staff member by their unique identifier
 */
export const staffDelete = <ThrowOnError extends boolean = false>(options: Options<StaffDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StaffDeleteResponses, StaffDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/{id}',
        ...options
    });
};

/**
 * Get staff member by ID
 * Retrieves a staff member by their unique identifier
 */
export const staffGetById = <ThrowOnError extends boolean = false>(options: Options<StaffGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StaffGetByIdResponses, StaffGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/{id}',
        ...options
    });
};

/**
 * Update staff member by ID
 * Updates a staff member with the provided data
 */
export const staffUpdate = <ThrowOnError extends boolean = false>(options: Options<StaffUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<StaffUpdateResponses, StaffUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/{id}',
        ...options
    });
};

/**
 * Get staff member by slug
 * Retrieves a staff member by their slug
 */
export const staffGetBySlug = <ThrowOnError extends boolean = false>(options: Options<StaffGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StaffGetBySlugResponses, StaffGetBySlugErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/slug/{slug}',
        ...options
    });
};

/**
 * Get all staff members
 * Retrieves all staff members
 */
export const staffAll = <ThrowOnError extends boolean = false>(options?: Options<StaffAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaffAllResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/',
        ...options
    });
};

/**
 * Create a new staff member
 * Creates a new staff member with the provided data
 */
export const staffCreate = <ThrowOnError extends boolean = false>(options?: Options<StaffCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StaffCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/',
        ...options
    });
};

/**
 * Find staff members by criteria
 * Searches for staff members based on provided criteria
 */
export const staffFind = <ThrowOnError extends boolean = false>(options?: Options<StaffFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StaffFindResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/staff/find',
        ...options
    });
};

/**
 * Get API status
 * Retrieves the current status of the API
 */
export const getApiStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/status/',
        ...options
    });
};

/**
 * Create a new team
 * Creates a new team with the provided data
 */
export const teamsCreate = <ThrowOnError extends boolean = false>(options?: Options<TeamsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TeamsCreateResponses, TeamsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/',
        ...options
    });
};

/**
 * Delete team by ID
 * Deletes a team by their unique identifier
 */
export const teamsDelete = <ThrowOnError extends boolean = false>(options: Options<TeamsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TeamsDeleteResponses, TeamsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}',
        ...options
    });
};

/**
 * Get team by ID
 * Retrieves a team by their unique identifier
 */
export const teamsGetById = <ThrowOnError extends boolean = false>(options: Options<TeamsGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamsGetByIdResponses, TeamsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}',
        ...options
    });
};

/**
 * Update team by ID
 * Updates a team with the provided data
 */
export const teamsUpdate = <ThrowOnError extends boolean = false>(options: Options<TeamsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TeamsUpdateResponses, TeamsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}',
        ...options
    });
};

/**
 * Get team snapshot by ID
 * Retrieves a team snapshot for a specific date
 */
export const teamsSnapshot = <ThrowOnError extends boolean = false>(options: Options<TeamsSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamsSnapshotResponses, TeamsSnapshotErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}/snapshot',
        ...options
    });
};

/**
 * Get team roster by team id
 * Retrieves a team active roster
 */
export const teamsRoster = <ThrowOnError extends boolean = false>(options: Options<TeamsRosterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamsRosterResponses, TeamsRosterErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}/roster',
        ...options
    });
};

/**
 * Update team statistics
 * Updates team statistics
 */
export const teamsUpdateStatistics = <ThrowOnError extends boolean = false>(options: Options<TeamsUpdateStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamsUpdateStatisticsResponses, TeamsUpdateStatisticsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}/updateStatistics',
        ...options
    });
};

/**
 * Find free teams
 * Searches for teams based on provided criteria
 */
export const teamsStats = <ThrowOnError extends boolean = false>(options?: Options<TeamsStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TeamsStatsResponses, TeamsStatsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/stats',
        ...options
    });
};

/**
 * Get team by slug
 * Retrieves a team by their slug
 */
export const teamsGetBySlug = <ThrowOnError extends boolean = false>(options: Options<TeamsGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamsGetBySlugResponses, TeamsGetBySlugErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/slug/{slug}',
        ...options
    });
};

/**
 * Find teams by criteria
 * Searches for teams based on provided criteria
 */
export const teamsFind = <ThrowOnError extends boolean = false>(options?: Options<TeamsFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TeamsFindResponses, TeamsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/find',
        ...options
    });
};

/**
 * Get team manager
 * Get the users that manages the team
 */
export const teamsGetManager = <ThrowOnError extends boolean = false>(options: Options<TeamsGetManagerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamsGetManagerResponses, TeamsGetManagerErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/teams/{id}/manager',
        ...options
    });
};

/**
 * Setup a new tenant
 * Creates a new tenant with the provided data
 */
export const tenantSetup = <ThrowOnError extends boolean = false>(options?: Options<TenantSetupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantSetupResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/setup',
        ...options
    });
};

/**
 * Get tenant by slug
 * Retrieves a tenant by its slug
 */
export const tenantsGetBySlug = <ThrowOnError extends boolean = false>(options: Options<TenantsGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsGetBySlugResponses, TenantsGetBySlugErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/slug/{slug}',
        ...options
    });
};

/**
 * Delete tenant by ID
 * Deletes a tenant by its unique identifier
 */
export const tenantsDelete = <ThrowOnError extends boolean = false>(options: Options<TenantsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantsDeleteResponses, TenantsDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}',
        ...options
    });
};

/**
 * Get tenant by ID
 * Retrieves a tenant by its unique identifier
 */
export const tenantsGetById = <ThrowOnError extends boolean = false>(options: Options<TenantsGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsGetByIdResponses, TenantsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}',
        ...options
    });
};

/**
 * Update tenant by ID
 * Updates a tenant with the provided data
 */
export const tenantsUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantsUpdateResponses, TenantsUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}',
        ...options
    });
};

/**
 * Get all tenants
 * Retrieves all tenants
 */
export const tenantsAll = <ThrowOnError extends boolean = false>(options?: Options<TenantsAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantsAllResponses, TenantsAllErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/',
        ...options
    });
};

/**
 * Create a new tenant
 * Creates a new tenant with the provided data
 */
export const tenantsCreate = <ThrowOnError extends boolean = false>(options?: Options<TenantsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantsCreateResponses, TenantsCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/',
        ...options
    });
};

/**
 * Find tenants by criteria
 * Searches for tenants based on provided criteria
 */
export const tenantsFind = <ThrowOnError extends boolean = false>(options?: Options<TenantsFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantsFindResponses, TenantsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/find',
        ...options
    });
};

/**
 * Accept Join Request
 * Accepts a join request
 */
export const tenantsAcceptJoinRequest = <ThrowOnError extends boolean = false>(options: Options<TenantsAcceptJoinRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TenantsAcceptJoinRequestResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/acceptJoinRequest',
        ...options
    });
};

/**
 * Refuse Join Request
 * Refuses a join request
 */
export const tenantsRefuseJoinRequest = <ThrowOnError extends boolean = false>(options: Options<TenantsRefuseJoinRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TenantsRefuseJoinRequestResponses, TenantsRefuseJoinRequestErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/refuseJoinRequest',
        ...options
    });
};

/**
 * List Join Requests
 * Lists join requests for a tenant
 */
export const tenantsListJoinRequests = <ThrowOnError extends boolean = false>(options: Options<TenantsListJoinRequestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsListJoinRequestsResponses, TenantsListJoinRequestsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/joinRequests',
        ...options
    });
};

/**
 * Find free teams for tenant
 * Searches for free teams for a tenant
 */
export const tenantsFreeTeams = <ThrowOnError extends boolean = false>(options: Options<TenantsFreeTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsFreeTeamsResponses, TenantsFreeTeamsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/freeTeams',
        ...options
    });
};

/**
 * Get current season
 * Get current season
 */
export const tenantsCurrentSeason = <ThrowOnError extends boolean = false>(options: Options<TenantsCurrentSeasonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsCurrentSeasonResponses, TenantsCurrentSeasonErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/currentSeason',
        ...options
    });
};

/**
 * Get tenant configuration by ID
 * Get tenant configuration with the provided data
 */
export const tenantsGetConfiguration = <ThrowOnError extends boolean = false>(options: Options<TenantsGetConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsGetConfigurationResponses, TenantsGetConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/configuration',
        ...options
    });
};

/**
 * Update tenant configuration by ID
 * Update tenant configuration with the provided data
 */
export const tenantsUpdateConfiguration = <ThrowOnError extends boolean = false>(options: Options<TenantsUpdateConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantsUpdateConfigurationResponses, TenantsUpdateConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/configuration',
        ...options
    });
};

/**
 * Find assigned teams for tenant
 * Searches for assigned teams for a tenant
 */
export const tenantsAssignedTeams = <ThrowOnError extends boolean = false>(options: Options<TenantsAssignedTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsAssignedTeamsResponses, TenantsAssignedTeamsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/assignedTeams',
        ...options
    });
};

/**
 * Get tenant by token
 * Searches for tenants by token
 */
export const tenantsGetByToken = <ThrowOnError extends boolean = false>(options?: Options<TenantsGetByTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantsGetByTokenResponses, TenantsGetByTokenErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/token',
        ...options
    });
};

/**
 * Get tenant tokens
 * Retrieves a tenant tokens
 */
export const tenantsGetTokens = <ThrowOnError extends boolean = false>(options: Options<TenantsGetTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantsGetTokensResponses, TenantsGetTokensErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tenants/{id}/tokens',
        ...options
    });
};

/**
 * Delete API token
 * Revokes an existing API token
 */
export const deleteApiTokens = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiTokensData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiTokensResponses, DeleteApiTokensErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tokens/',
        ...options
    });
};

/**
 * Create a new token
 * Creates a new API token with the provided data
 */
export const tokensCreate = <ThrowOnError extends boolean = false>(options?: Options<TokensCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TokensCreateResponses, TokensCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tokens/',
        ...options
    });
};

/**
 * Import players data
 * Imports players data from a CSV file
 */
export const toolsImportPlayersData = <ThrowOnError extends boolean = false>(options?: Options<ToolsImportPlayersDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ToolsImportPlayersDataResponses, ToolsImportPlayersDataErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/importPlayersData',
        ...options
    });
};

/**
 * Update players statistics
 * Update players statistics
 */
export const toolsUpdatePlayersStatistics = <ThrowOnError extends boolean = false>(options?: Options<ToolsUpdatePlayersStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ToolsUpdatePlayersStatisticsResponses, ToolsUpdatePlayersStatisticsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/updatePlayersStatistics',
        ...options
    });
};

/**
 * Export players data
 * Exports players data to a CSV file
 */
export const toolsExportPlayersData = <ThrowOnError extends boolean = false>(options?: Options<ToolsExportPlayersDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ToolsExportPlayersDataResponses, ToolsExportPlayersDataErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/exportPlayersData',
        ...options
    });
};

/**
 * Import players list
 * Imports players list from a CSV file
 */
export const toolsImportPlayersList = <ThrowOnError extends boolean = false>(options?: Options<ToolsImportPlayersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ToolsImportPlayersListResponses, ToolsImportPlayersListErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/importPlayersList',
        ...options
    });
};

/**
 * Import players Pes data
 * Imports players Pes data from a CSV file
 */
export const toolsImportPlayersPesData = <ThrowOnError extends boolean = false>(options?: Options<ToolsImportPlayersPesDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ToolsImportPlayersPesDataResponses, ToolsImportPlayersPesDataErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/importPlayersPesData',
        ...options
    });
};

/**
 * Import player data
 * Imports player data from tmdata
 */
export const toolsTmDataGetPlayer = <ThrowOnError extends boolean = false>(options: Options<ToolsTmDataGetPlayerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsTmDataGetPlayerResponses, ToolsTmDataGetPlayerErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/tmdata/player/{tmid}',
        ...options
    });
};

/**
 * Import team data
 * Imports team data from tmdata
 */
export const toolsTmDataGetTeam = <ThrowOnError extends boolean = false>(options: Options<ToolsTmDataGetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsTmDataGetTeamResponses, ToolsTmDataGetTeamErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/tmdata/teams/{tmid}',
        ...options
    });
};

/**
 * Search tmdata
 * Search players and teams in tmdata
 */
export const toolsTmDataSearch = <ThrowOnError extends boolean = false>(options: Options<ToolsTmDataSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ToolsTmDataSearchResponses, ToolsTmDataSearchErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/tools/tmdata/search',
        ...options
    });
};

/**
 * Create a new transaction
 * Creates a new transaction with the provided data
 */
export const transactionsInsert = <ThrowOnError extends boolean = false>(options?: Options<TransactionsInsertData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TransactionsInsertResponses, TransactionsInsertErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/transactions/',
        ...options
    });
};

/**
 * Find transactions by criteria
 * Searches for transactions based on provided criteria
 */
export const transactionsFind = <ThrowOnError extends boolean = false>(options?: Options<TransactionsFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TransactionsFindResponses, TransactionsFindErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/transactions/find',
        ...options
    });
};

/**
 * Get transaction by ID
 * Retrieves a transaction by its unique identifier
 */
export const transactionsGetById = <ThrowOnError extends boolean = false>(options: Options<TransactionsGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TransactionsGetByIdResponses, TransactionsGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/transactions/{id}',
        ...options
    });
};

/**
 * Delete user by ID
 * Deletes a user by their unique identifier
 */
export const usersDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteResponses, UsersDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Get user by ID
 * Retrieves a user by its unique identifier
 */
export const usersGetById = <ThrowOnError extends boolean = false>(options: Options<UsersGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetByIdResponses, UsersGetByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Update user by ID
 * Updates a user with the provided data
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponses, UsersUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Get user by identity ID
 * Retrieves a user by their external identity ID
 */
export const usersGetByIdentity = <ThrowOnError extends boolean = false>(options: Options<UsersGetByIdentityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetByIdentityResponses, UsersGetByIdentityErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/identity/{identityId}',
        ...options
    });
};

/**
 * Get user by slug
 * Retrieves a user by their slug
 */
export const usersGetBySlug = <ThrowOnError extends boolean = false>(options: Options<UsersGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetBySlugResponses, UsersGetBySlugErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/slug/{slug}',
        ...options
    });
};

/**
 * Get all users
 * Retrieves all users
 */
export const usersAll = <ThrowOnError extends boolean = false>(options?: Options<UsersAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersAllResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

/**
 * Create a new user
 * Creates a new user with the provided data
 */
export const usersCreate = <ThrowOnError extends boolean = false>(options?: Options<UsersCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UsersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

/**
 * Find users by criteria
 * Searches for users based on provided criteria
 */
export const usersFind = <ThrowOnError extends boolean = false>(options?: Options<UsersFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UsersFindResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/find',
        ...options
    });
};

/**
 * Create tenant
 * Creates a new tenant
 */
export const usersCreateTenant = <ThrowOnError extends boolean = false>(options: Options<UsersCreateTenantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateTenantResponses, UsersCreateTenantErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/tenant',
        ...options
    });
};

/**
 * Join requests
 * Get the list of join requests for user
 */
export const usersJoinRequests = <ThrowOnError extends boolean = false>(options: Options<UsersJoinRequestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersJoinRequestsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/joinRequests',
        ...options
    });
};

/**
 * Create request to join a tenant
 * Create request to join a tenant
 */
export const usersJoinTenant = <ThrowOnError extends boolean = false>(options: Options<UsersJoinTenantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersJoinTenantResponses, UsersJoinTenantErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/joinTenant',
        ...options
    });
};

/**
 * Get owned teams
 * Retrieves the owned teams
 */
export const usersGetTeams = <ThrowOnError extends boolean = false>(options: Options<UsersGetTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetTeamsResponses, UsersGetTeamsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/teams',
        ...options
    });
};

/**
 * Get tenants
 * Retrieves the tenants
 */
export const usersGetTenants = <ThrowOnError extends boolean = false>(options: Options<UsersGetTenantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetTenantsResponses, UsersGetTenantsErrors, ThrowOnError>({
        security: [
            {
                name: 'crootball-api-key',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/tenants',
        ...options
    });
};